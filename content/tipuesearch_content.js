var tipuesearch = {"pages": [{'title': '網路連線設定', 'text': '了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括 IPv4 網路與 IPv6 網路設定. 正常情況下, 電腦輔助設計室中的 64 台電腦透過 IPv4 協定下的 DHCP 與 NAT 上網, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址, 然後以 NAT 的一組外部 IP 上網, 通常必須設定 Proxy Server 為 http://proxy.kmol.info:3128 後上網會比較順暢, 但若 8 台 Proxy Servers 無法正常運作時, 則取消 Proxy Server 的設定. 瀏覽器代理主機設定 了解如何設定 Google Chrome 與 Firefox 瀏覽器的代理主機設定. 申請 Github 帳號 利用 Gmail 帳號申請 Github 帳號, 申請後利用電子郵箱收信進行確認後, 就可以在 Github 上建立倉儲. \n', 'tags': '', 'url': '網路連線設定.html'}, {'title': '配置可攜程式環境', 'text': '取得 Windows 10 64 位元環境下的可攜程式環境 ( 下載\xa0 2019_cdb_w5.7z ), 下載後解開目錄, 放入 USB3.0 規格以上的隨身碟或隨身硬碟. 以滑鼠點擊 start.bat 開啟可攜隨身系統, 以 stop.bat 關閉可攜隨身系統, 隨身碟必須在關閉所有應用程式執行下, 才可正常退出. 了解基本的 DOS (Disk Operating System) 指令 C:\\> 符號為 DOS 命令列視窗的回應 (Prompt), 表示目前在 C 槽硬碟的 \\ 根目錄, 若要切換到 Y 槽, 則在電腦的回應後, 輸入 Y:, 命令列將轉為 Y:\\> 若要更換目錄, 則使用 cd, 也就是 change directory 的意思, 例如: Y:\\>cd tmp 表示要從 Y 槽的根目錄更換到 tmp 目錄, 也就是 Y:\\tmp> 若要再回到 Y 槽的根目錄, 可以使用 cd .. 表示要從目前所在目錄, 往上跳回一個目錄, 也就是重新回到 Y 槽的根目錄. 另外, 無論目前位於哪一個子目錄, 也可以使用 cd \\ 直接回到根目錄. 或者從 Y:\\> 直接使用 cd \\tmp\\repo\\ssh\\wcm2019 直接從 Y 槽的根目錄, 跳進 Y:\\tmp\\repo\\ssh\\wcm2019> 此外, 常用的 DOS 指令有: dir - 列出目前所在目錄的內容 mkdir - 隨後加上要建立目錄的名稱, 可以建立目錄 cls - clear screen, 清除目前的命令列顯示的內容 \n', 'tags': '', 'url': '配置可攜程式環境.html'}, {'title': '倉儲改版', 'text': '可攜程式系統中已經內建 git, 可以在啟動 start.bat 後, 透過 path 的設定, 直接執行 git 指令. 建立 Git 倉儲, 共分為兩類, 一類是直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以 git clone 加上倉儲連線 URL, 將倉儲克隆一份到近端, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版. 另一類則是故意在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以 git remote add 設法在近端倉儲中納入 origin URL 後, 將近端倉儲版本新增提交推送到遠端. git add git add 可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容. git add 在 GIT 架構下, 是對所新增或修改的內容拍快照: \n git add . adds all modified and new (untracked) files in the current directory and all subdirectories to the staging area (a.k.a. the index), thus preparing them to be included in the next git commit . Any files matching the patterns in the .gitignore file will be ignored by git add \n git commit\xa0 git commit 執行之前, 必須使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間. 當使用者採用 git commit -m "改版說明訊息", 此次提交到 .git 目錄下的更動內容, 均會綁定使用者身分與改版所輸入的說明訊息. git push git push 在隨後沒有輸入遠端 URL 代號時, 表示要推送到 origin, 若透過 git remote add 設定其他代號與 URL 對應時, git push 加上代號, 就可以將此次的提交內容, 推送到指定的 URL 所在遠端倉儲. \n', 'tags': '', 'url': '倉儲改版.html'}, {'title': '靜態 CMSimfly', 'text': '自行建立靜態內容管理網站 利用 CMSimfly ( https://github.com/chiamingyen/cmsimfly )\xa0內容, 建立自己的 \xa0 Github Pages \xa0 網站 \n', 'tags': '', 'url': '靜態 CMSimfly.html'}, {'title': 'Mobile 網站內容', 'text': '使用 Flask, bs4 與 lxml 模組 了解 CMSimfly 如何建構, 並且嘗試修改現有功能, 除錯或建立自己的網際內容管理系統 \n 實體主機下的網際內容管理 如何在實體主機上安裝 \xa0 Ubuntu \xa0 18.04 ( https://www.ubuntu.com/about/release-cycle ), 配置網路連線, 然後架構 \xa0 uwsgi \xa0 環境下的 CMSimfly 動態網站, 或建立 Fossil SCM 用來伺服管理 CMSimfly 下有版次管理的靜態網頁, 或利用 \xa0 nginx \xa0 伺服無版次管理的 CMSimfly 靜態網頁. \n', 'tags': '', 'url': 'Mobile 網站內容.html'}, {'title': 'Virtual Host', 'text': '虛擬主機下的類 Github 網站 如何利用 \xa0 Fossil SCM , 在 \xa0 Virtualbox \xa0 中的 \xa0 Ubuntu 18.04-2 \xa0(8.5 GB) 建立類似 Github 的系統, 可以放入 CMSimfly 的靜態網頁， \n virtual box 設定 Virtualbox File 下拉式功能表下的 Preferences 屬於全系統的偏好設定, 而與各虛擬主機對應的 Settings 則僅與該對應的虛擬主機有關. Virtualbox 虛擬主機網路設定 \n Not Attached 當使用者需要模擬虛擬主機的網路卡連接線被拔除的情況時, 可將該虛擬主機的網路卡以 Not Attached 模式設定. NAT 當使用者只需要讓虛擬主機能夠上網, 下載檔案或登入電子郵箱時, 可以將虛擬主機的網路卡以 NAT 模式設定. 在 NAT 模式下, 只有 ping 能夠運作, tracert 與其他與 ICMP 、VPN 或 PPTP 等協定對應的功能都將會失效. NAT\xa0 Network NAT Network 與 NAT 類似, 但使用者可以透過 File-Preferences-Network 新增多個 NAT Network, 並選擇所要使用的網段與 DHCP 或是否支援 IPv6 等設定. Bridged Adapter 當使用者需要利用虛擬主機建立與 Host 位階相同的網路模式時, 可以將虛擬主機的網卡設訂為 Bridged Adapter. Internal Network 當使用者需要讓虛擬主機設定為\xa0 https://en.wikipedia.org/wiki/Software-defined_networking \xa0時, 可以將網路卡設為可透過軟體調控的網路模式. Host-only Adapter 當使用者只需要讓虛擬主機與 Host 電腦連線時, 可以將網卡設為 Host-only Adapter, 此一模式的使用時機可以在虛擬主機中配置 WWW 伺服器、應用程式伺服器、Fossil SCM 伺服器, 然後透過 Host 上的瀏覽器進行連線測試, 或者在虛擬主機上安裝特定軟體套件的認證主機, 以便讓 Host 中的軟體套件透過虛擬主機執行授權認證. \n', 'tags': '', 'url': 'Virtual Host.html'}, {'title': 'Virtualbox', 'text': '利用\xa0 Virtualbox \xa0建立虛擬\xa0 Ubuntu 18.04 \xa0網際內容管理系統伺服主機: 1. 安裝最新版的 Virtualbox 2. 建立 Ubuntu 18.04 虛擬主機 3. 以網路卡橋接啟動 Ubuntu 伺服器 4. 以 sudo apt install nginx 安裝 nginx WWW 伺服器 5. 以 ifconfig 查 Ubuntu 伺服器的 IP, 測試 nginx 伺服器是否可以連線 6. 以 Windows 10\xa0 下的 Filezilla client, 將編輯好的 nginx 設定檔案送到 Ubuntu 7.\xa0利用 Ubuntu 指令將設定檔案搬至設定位置後, 以 /etc/init.d/nginx restart 重新啟動 nginx 8. 在 Ubuntu 中以 sudo apt install uwsgi 安裝 uwsgi 9. 在 Windows 10 編輯 uwsgi 與 nginx 所需的設定檔案, 完成後以 filezilla 送至 Ubuntu. 10. 將 CMSimfly 程式碼送到 Ubuntu 伺服器中對應目錄後. 11. 在 Ubuntu 建立 cmsimfly 服務, 並設定隨機啟動. 12. 完成後, 在 Windows 10 以瀏覽器連線至 CMSimfly, 確認動態網頁與靜態網頁可以在虛擬主機中正常啟動. \n', 'tags': '', 'url': 'Virtualbox.html'}, {'title': '期中報告', 'text': '40723122 施東勝\xa0 https://www.youtube.com/watch?v=hEIMfQZy904 \n 40723130 陳彥旭\xa0 https://youtu.be/kcYoyJfUzwQ \n 40723132 陳乾豐\xa0 https://youtu.be/vuB8cI9bfqs \n 40723138 黃奕慶\xa0 https://www.youtube.com/watch?v=0-PIQCpXfsw&feature=youtu.be \n 40723148 鄭博鴻\xa0 https://youtu.be/IBVqsCszxjI \n 40723149 鄭嘉文\xa0 https://youtu.be/M4qsbW7XFiE \n', 'tags': '', 'url': '期中報告.html'}, {'title': '簡介', 'text': 'CMSimfly ( https://github.com/chiamingyen/cmsimfly)  是一套簡單的網際內容管理系統, 採用 Flask 網際框架, 以 Beautifulsoup 解讀分頁內容. \n \n \n', 'tags': '', 'url': '簡介.html'}, {'title': '成員', 'text': '40723122 施東勝 \n 40723130 陳彥旭 \n 40723132 陳乾豐 \n 40723138 黃奕慶 \n 40723148 鄭博鴻 \n 40723149 鄭嘉文 \n', 'tags': '', 'url': '成員.html'}, {'title': 'GAME1', 'text': 'game1 \n The game of craps has the following rules: \n 課本章節:\xa0 https://link.springer.com/chapter/10.1007/978-1-4842-4155-4_2 \xa0 \n The player throws a pair of dice. The sum of the two top faces is what matters so a 1 and a 3 is the same as 2 and 2. The sum of two 6-sided dice can be any number from 2 to 12. If the player throws a 7 or 11 on the first throw, the player wins. If the player throws a 2, 3, or 12, the player loses. For any other result (4, 5, 6, 8, 9, 10), this result is recorded as what is called the player’s point and a follow-up throw is required. On follow-up throws, a throw of 7 loses and a throw of the player’s point wins. For anything else, the game continues with the follow-up throw rules. \n Try it \n \n \n \n \n 上述程式原始碼: \n <p><button onclick="myFunction()">Try it</button></p>\n<p id="demo"></p>\n<script>// <![CDATA[\nfunction myFunction() {\n  document.getElementById("demo").innerHTML = Math.floor(Math.random()*10);\n}\n// ]]></script> \n \n \n \n  Your browser doesn\'t support the HTML5 element canvas.      Throw dice  \n Stage:   Point:   Outcome:  \n 上述程式原始碼: \n', 'tags': '', 'url': 'GAME1.html'}, {'title': '國旗', 'text': '\n \n \n \n \n \n  啟動 Brython  \n \n \n \n \n \n \n \n \n 上述程式原始碼: \n', 'tags': '', 'url': '國旗.html'}, {'title': '齒輪', 'text': '\n \n \n \n \n  啟動 Brython  \n \n \n \n \n \n       Set Number of Gears \n', 'tags': '', 'url': '齒輪.html'}, {'title': 'Ubuntu操作步驟', 'text': '利用 Virtualbox 建立虛擬 Ubuntu 18.04 網際內容管理系統伺服主機: 1. 安裝最新版的 Virtualbox 2. 建立 Ubuntu 18.04 虛擬主機 3. 以網路卡橋接啟動 Ubuntu 伺服器 4. 以 sudo apt install nginx 安裝 nginx WWW 伺服器 5. 以 ifconfig 查 Ubuntu 伺服器的 IP, 測試 nginx 伺服器是否可以連線 6. 以 Windows 10\xa0 下的 Filezilla client, 將編輯好的 nginx 設定檔案送到 Ubuntu 7.\xa0利用 Ubuntu 指令將設定檔案搬至設定位置後, 以 /etc/init.d/nginx restart 重新啟動 nginx 8. 在 Ubuntu 中以 sudo apt install uwsgi 安裝 uwsgi 9. 在 Windows 10 編輯 uwsgi 與 nginx 所需的設定檔案, 完成後以 filezilla 送至 Ubuntu. 10. 將 CMSimfly 程式碼送到 Ubuntu 伺服器中對應目錄後. 11. 在 Ubuntu 建立 cmsimfly 服務, 並設定隨機啟動. 12. 完成後, 在 Windows 10 以瀏覽器連線至 CMSimfly, 確認動態網頁與靜態網頁可以在虛擬主機中正常啟動. \n', 'tags': '', 'url': 'Ubuntu操作步驟.html'}, {'title': 'Ubuntu 安裝', 'text': '先安裝\xa0 Virtualbox 和 Filezilla client \n 下載 Ubuntu 18.04.2 LTS 的安裝檔 \n 下載 Ubuntu Server (18.04.2 LTS) 安裝檔 \n', 'tags': '', 'url': 'Ubuntu 安裝.html'}, {'title': 'SSH協定', 'text': '\xa0\xa0Github 倉儲 以 scrum-1 帳號為例, 若採 ssh clone 倉儲, 需要先設定對應權限. 基本概念 從 \xa0 https://github.com/scrum-1/cd2019 \xa0 倉儲中對應的 clone or downloads 中 Clone with SSH, 所列出的 URL 為: \xa0\xa0\xa0 git@github.com:scrum-1/cd2019.git 表示將以 git 帳號, 登入 github.com 主機, 進入 scrum-1 帳號中對應的 cd2019 倉儲, 若直接 git clone 此一倉儲, 則指令為: \xa0\xa0\xa0 git clone git@github.com:scrum-1/cd2019.git 特別注意, 其中的 github.com 為網站符號名稱, 意思是所採用的 ssh 將利用 @ 前方的 git 當作帳號, 並且將採用 ssh 協定登入 github.com 網站. 假如, 使用者所採用的可攜程式套件, 只在 home 目錄下的 .ssh 目錄登記一個 private key, 使用者就可以直接在 home/.ssh/config 中,將 github.com 當作 Host 代號, 並對應到 Hostname 為 github.com 作為連線的網站名稱. 但是, 若使用者所使用的可攜程式套件, 登錄一個以上的 private keys 時, 就必須透過一個以上不同的 Host 名稱加以區別, 以便導引 ssh 協定至不同區段, 以不同的 private key 對應 Github 上不同帳號下所登錄的 public key. \n', 'tags': '', 'url': 'SSH協定.html'}, {'title': '期末影片', 'text': 'https://www.youtube.com/watch?v=oBO8aU4AID0 \n \n', 'tags': '', 'url': '期末影片.html'}]};